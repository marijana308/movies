{"version":3,"sources":["components/Search.js","components/Movie.js","components/MovieList.js","components/MovieDetails.js","App.js","serviceWorker.js","index.js"],"names":["Search","this","props","value","handleChange","handleSubmit","className","id","onSubmit","type","name","placeholder","onChange","Component","Movie","movie","Poster","Title","src","alt","onClick","handleDetails","MovieList","movies","searchInput","error","Fragment","map","key","imdbID","MovieDetails","state","fetch","data","json","jsonData","setState","console","log","handleIndex","Actors","Awards","Country","Director","Genre","Language","Plot","Rated","Released","Runtime","Writer","imdbRating","href","target","rel","App","searchedFor","index","movieID","e","preventDefault","getMovies","displayPage","undefined","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.a1a0f5a3.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\n/***** Search Component *****/\r\nexport class Search extends Component {\r\n  render() {\r\n    // Destructuring\r\n    const { value, handleChange, handleSubmit } = this.props;\r\n\r\n    return (\r\n      <div className=\"searchContainer\">\r\n        <h1 id=\"title\">Search For Movies</h1>\r\n        <form onSubmit={handleSubmit}>\r\n          <input\r\n            type=\"text\"\r\n            name=\"search\"\r\n            placeholder=\"Enter movie title...\"\r\n            onChange={handleChange}\r\n            value={value}\r\n            className=\"searchInput\"\r\n          />\r\n          <button type=\"submit\" className=\"button searchBtn\">\r\n            Search\r\n          </button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Search;\r\n","import React, { Component } from \"react\";\r\n\r\n/***** Movie Component *****/\r\nexport class Movie extends Component {\r\n  render() {\r\n    // Destructuring\r\n    const { Poster, Title } = this.props.movie;\r\n\r\n    return (\r\n      <div className=\"movie\">\r\n        <img src={Poster} alt=\"Movie Poster\" className=\"poster\" />\r\n        <h2 className=\"movieTitle\">{Title}</h2>\r\n        <button\r\n          type=\"button\"\r\n          onClick={this.props.handleDetails}\r\n          className=\"button\"\r\n        >\r\n          MOVIE DETAILS\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Movie;\r\n","import React, { Component } from \"react\";\r\nimport Search from \"./Search\";\r\nimport Movie from \"./Movie\";\r\n\r\n/***** MovieList Component *****/\r\nexport class MovieList extends Component {\r\n  // Update Index and movieID Values in State\r\n  //   handleDetails = (index, id) => {\r\n  //     this.setState({\r\n  //       index: index,\r\n  //       movieID: id\r\n  //     });\r\n  //   };\r\n\r\n  render() {\r\n    // Destructuring\r\n    const {\r\n      movies,\r\n      handleDetails,\r\n      searchInput,\r\n      handleChange,\r\n      handleSubmit,\r\n      error\r\n    } = this.props;\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <Search\r\n          handleChange={handleChange}\r\n          handleSubmit={handleSubmit}\r\n          value={searchInput}\r\n        />\r\n        <div className=\"moviesContainer\">\r\n          {error ? (\r\n            <h1 className=\"error\">{error}</h1>\r\n          ) : (\r\n            movies.map(movie => {\r\n              return (\r\n                <Movie\r\n                  key={movie.imdbID}\r\n                  movie={movie}\r\n                  handleDetails={() => handleDetails(1, movie.imdbID)}\r\n                  id={movie.imdbID}\r\n                />\r\n              );\r\n            })\r\n          )}\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MovieList;\r\n","import React, { Component } from \"react\";\r\n\r\n/***** MovieDetails Component *****/\r\nexport class MovieDetails extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      movie: []\r\n    };\r\n  }\r\n\r\n  /***** Make Request to API and Receive Data *****/\r\n  async componentDidMount() {\r\n    try {\r\n      // Send Request to API\r\n      const data = await fetch(\r\n        `https://www.omdbapi.com/?i=${this.props.id}&apikey=6916a545`\r\n      );\r\n\r\n      // Convert Response into json\r\n      const jsonData = await data.json();\r\n\r\n      // Populate State With Data\r\n      this.setState({ movie: jsonData });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    // Destructuring\r\n    const { handleIndex } = this.props;\r\n    const {\r\n      Title,\r\n      Poster,\r\n      Actors,\r\n      Awards,\r\n      Country,\r\n      Director,\r\n      Genre,\r\n      Language,\r\n      Plot,\r\n      Rated,\r\n      Released,\r\n      Runtime,\r\n      Writer,\r\n      imdbRating,\r\n      imdbID\r\n    } = this.state.movie;\r\n\r\n    return (\r\n      <div className=\"pageContainer\">\r\n        <div className=\"detailsContainer\">\r\n          <div className=\"posterContainer\">\r\n            <img src={Poster} alt=\"Movie Poster\" className=\"detailsPoster\" />\r\n          </div>\r\n          <div className=\"listContainer\">\r\n            <ul className=\"detailsList\">\r\n              <li>GENRE: {Genre}</li>\r\n              <li>RELEASED: {Released}</li>\r\n              <li>RATED: {Rated}</li>\r\n              <li>RUNTIME: {Runtime}</li>\r\n              <li>DIRECTOR: {Director}</li>\r\n              <li>WRITER: {Writer}</li>\r\n              <li>ACTORS: {Actors}</li>\r\n              <li>LANGUAGE: {Language}</li>\r\n              <li>COUNTRY: {Country}</li>\r\n              <li>IMDb RATING: {imdbRating}</li>\r\n              <li>AWARDS: {Awards}</li>\r\n              <li>PLOT: {Plot}</li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n        <div className=\"buttonsContainer\">\r\n          <button\r\n            type=\"button\"\r\n            onClick={() => handleIndex(0)}\r\n            className=\"button backBtn\"\r\n          >\r\n            BACK TO SEARCH\r\n          </button>\r\n          <button type=\"button\" className=\"button imdbBtn\">\r\n            <a\r\n              href={`http://imdb.com/title/${imdbID}`}\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n            >\r\n              VIEW ON IMDB\r\n            </a>\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MovieDetails;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport MovieList from \"./components/MovieList\";\nimport MovieDetails from \"./components/MovieDetails\";\n\nexport class App extends Component {\n  state = {\n    movies: [],\n    searchInput: \"\",\n    searchedFor: \"\",\n    index: 0,\n    movieID: \"\",\n    error: \"\"\n  };\n\n  /***** MAKE API REQUEST AND RECEIVE DATA*****/\n  async getMovies() {\n    try {\n      // Make Request to API\n      const data = await fetch(\n        `https://www.omdbapi.com/?s=${this.state.searchedFor}&apikey=6916a545`\n      );\n      // Convert Response into json\n      const jsonData = await data.json();\n\n      // Check If There Is Results\n      if (jsonData.Search === undefined) {\n        // Display if there is no results\n        this.setState(() => {\n          return { error: \"No Results Found\" };\n        });\n      } else {\n        // Populate State With Data If There Are Results\n        this.setState(() => {\n          return { movies: jsonData.Search, error: \"\" };\n        });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  /***** METHODS *****/\n\n  // Handle Form Submit\n  handleSubmit = e => {\n    // Prevent Default Actions(Prevent Page Reloading)\n    e.preventDefault();\n\n    // Call Method to Make Request to API\n    this.getMovies();\n\n    // Clear searchInput value in state\n    this.setState({\n      searchInput: \"\"\n    });\n  };\n\n  // Set State Values to the Value in the Text Input\n  handleChange = e => {\n    this.setState({\n      searchInput: e.target.value,\n      searchedFor: e.target.value\n    });\n  };\n\n  // Update Page Index Value in State\n  handleIndex = index => {\n    this.setState({\n      index: index\n    });\n  };\n\n  // Update Index and movieID Values in State\n  handleDetails = (index, id) => {\n    this.setState({\n      index: index,\n      movieID: id\n    });\n  };\n\n  /***** Conditional To Determine Which Components to Display *****/\n  displayPage = index => {\n    switch (index) {\n      // If index Value in State is 0, Display the MovieList Component\n      case 0:\n        return (\n          <MovieList\n            movies={this.state.movies}\n            handleChange={this.handleChange}\n            handleSubmit={this.handleSubmit}\n            value={this.state.searchInput}\n            handleDetails={this.handleDetails}\n            error={this.state.error}\n          />\n        );\n      // If index Value in State is 1, Display the MovieDetails Component\n      case 1:\n        return (\n          <MovieDetails\n            handleIndex={this.handleIndex}\n            id={this.state.movieID}\n          />\n        );\n      default:\n    }\n  };\n\n  render() {\n    return (\n      <React.Fragment>{this.displayPage(this.state.index)}</React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n//import \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}